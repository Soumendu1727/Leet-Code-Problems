    void letterCombinationsHelper(string& digits, int index, vector<string>& mappings, string& current, vector<string>& result) {
        if (index == digits.size()) {
            result.push_back(current);
            return;
        }
        string letters = mappings[digits[index] - '2'];
        for (int i = 0; i < letters.size(); i++) {
            current.push_back(letters[i]);
            letterCombinationsHelper(digits, index + 1, mappings, current, result);
            current.pop_back();
        }
    }


class Solution {
public:
    vector<string> letterCombinations(string digits) {
        vector<string> result;
        if (digits.empty()) {
            return result;
        }
        vector<string> mappings = {"abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        string current;
        letterCombinationsHelper(digits, 0, mappings, current, result);
        return result;
    }
};